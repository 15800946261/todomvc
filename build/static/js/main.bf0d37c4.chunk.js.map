{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TODO_FILTER","App","props","handleAddTask","value","newTasks","state","tasks","concat","id","Utils","generateId","name","bgColor3","delLine","setState","handleEditTask","map","task","handleDeleteBgColor3","filter","isDelete","isFinish","createIput","this","createInput","createClick","handleCreateClick","bind","disableInput","handleDisableInput","filterTasks","display","handleDisplay","editTask","onDeleteBgColor3","onFinishDelLine","handleFinishDelLine","addTask","dataSource","React","Component","Header","handleKeyDown","event","keyCode","preventDefault","target","onKeyDown","placeholder","autoFocus","MessageList","style","paddingLeft","margin","item","key","data","MsgItem","styleObj","background","textDecoration","onClick","handleClickObject","random","uuid","i","Math","toString","CreateButton","className","DeleteButton","console","log","disabled","FinishButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf0d37c4.chunk.js","sourcesContent":["import React from 'react';\nconst TODO_FILTER = {\n  'SHOW_ALL': () => true,\n}\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      createIput: false,\n      isDelete: false,\n      isFinish: false,\n      tasks: [],\n      filter: 'SHOW_ALL',\n    };\n  }\n \n//onclick create button,创建input\n  handleCreateClick() {\n    this.setState({ ...this.state, createInput: true });\n  }\n\n  //用于enter键的回调函数，隐藏之前创建的input\n  handleDisableInput() {\n    this.setState({ ...this.state, createInput: false});\n  }\n\n  //用于Delete, Finish键的亮显\n  handleDisplay () {\n    this.setState({ ...this.state, isDelete: true, isFinish: true })\n  }\n\n//把要增加的tasks放在一个内存暂时存储起来\n  handleAddTask = (value) => {\n    const newTasks = this.state.tasks.concat({\n      id: Utils.generateId(),\n      name: value,\n      bgColor3: false,\n      delLine: false,\n    });\n    this.setState({ tasks: newTasks });\n  };\n  \n  //相当于之前写的msgitem中的handleclickobject(),用来处理变gray\n  handleEditTask = (id) => {\n    const newTasks = this.state.tasks.map( (task) => {\n      if (id === task.id) {\n        task.bgColor3 = !task.bgColor3;\n      }\n      return task;\n    } );\n    this.setState({tasks: newTasks});\n  };\n\n  handleDeleteBgColor3 = () => {\n    const newTasks = this.state.tasks.filter( (task) => !task.bgColor3 );\n    this.setState({ ...this.state, tasks: newTasks, isDelete: false, isFinish: false });\n  };\n\n  handleFinishDelLine () {\n    const newTasks = this.state.tasks.map( (task) => {\n      if (task.bgColor3 === true) {\n        task.delLine = !task.delLine;\n        task.bgColor3 = false;\n      }\n      return task;\n    } );\n    this.setState({ ...this.state, tasks: newTasks, isDelete: false, isFinish: false });\n  }\n\n  render() {\n    const createInput = this.state.createInput;\n    const isDelete = this.state.isDelete;\n    const isFinish = this.state.isFinish;\n    const createClick = this.handleCreateClick.bind(this);\n    const disableInput = this.handleDisableInput.bind(this);\n    //这句话有点不明白\n    const filterTasks = this.state.tasks.filter(TODO_FILTER[this.state.filter]);\n    const display = this.handleDisplay.bind(this);\n    const editTask = this.handleEditTask.bind(this);\n    const onDeleteBgColor3 = this.handleDeleteBgColor3.bind(this);\n    const onFinishDelLine = this.handleFinishDelLine.bind(this);\n    return (\n      <div>\n        <CreateButton createInput={createInput} createClick={createClick}/>\n        <DeleteButton isDelete={isDelete} isFinish={isFinish} onDeleteBgColor3 = {onDeleteBgColor3}/>\n        <FinishButton isDelete={isDelete} isFinish={isFinish} onFinishDelLine = {onFinishDelLine} />\n        <Header createInput={createInput} addTask={this.handleAddTask} disableInput={disableInput} dataSource={filterTasks} \n                display={display} editTask={editTask} isFinish={isFinish}/>        \n      </div>);\n  }\n}\n\n//针对于enter键的组件\nclass Header extends React.Component {  \n  handleKeyDown = (event) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      //这行应该还有其他的书写方式，用来把input消失。\n      this.props.disableInput(); \n      this.props.addTask(event.target.value);\n      // event.target.value = '';\n      }\n    }\n    render() {\n      const createInput = this.props.createInput;\n      const dataSource = this.props.dataSource;\n      const display = this.props.display;\n      const editTask = this.props.editTask;\n      const isFinish = this.props.isFinish;\n      return (\n        <div>\n          {createInput ? <input\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"my todo item...\"\n          autoFocus\n          /> : null}\n         <MessageList dataSource={dataSource} display={display} editTask={editTask} isFinish={isFinish} />\n        </div>\n      )\n    }\n  }\n\nclass MessageList extends React.Component {\n  render() {\n    const display = this.props.display;\n    const editTask = this.props.editTask;\n    const isFinish = this.props.isFinish;\n    return (\n      <ul style={{ paddingLeft: 0, margin: 0 }}>\n        {/* 在调试style的时候，可以用border进行框限 */}\n        {/* {<p style={{margin: 0}}>dfsdfsd</p>} */}\n        {/* 一个好的经验法则是：在 map() 方法中的元素需要设置 key 属性。 */}\n        {this.props.dataSource.map( (item) =>{\n          return (\n            <MsgItem \n            key={item.id}\n            data={item}\n            display={display} \n            editTask={editTask}\n            isFinish={isFinish}\n            />\n          );\n          })\n        }   \n      </ul>\n    );\n  }\n}\n\n//MsgItem把dataSource中的元素显示出来\nclass MsgItem extends React.Component {\n  handleClickObject() {\n    const editTask = this.props.editTask;\n    editTask(this.props.data.id, this.props.data.name);\n    const display = this.props.display;\n    display();\n  }\n\n  render() {\n    const styleObj = {\n      background: !this.props.data.bgColor3 ? '' : 'gray',\n      textDecoration: !this.props.data.delLine ? '' : 'line-through'\n    }\n    return (\n      <div> \n         <label style={styleObj} onClick={this.handleClickObject.bind(this)}>{this.props.data.name}</label>\n         {/* <label style={{ background: !this.props.data.bgColor3 ? '' : 'gray',  textDecoration: !this.props.data.delLine ? '' : 'line-through'}} onClick={this.handleClickObject.bind(this)}>{this.props.data.name}</label> */}  \n      </div>\n    )\n  }\n}\n\n// 用函数随机生成的id作为key\nclass Utils {\n  static generateId() {\n    let random;\n    let uuid = '';\n    for (let i = 0; i < 32; i++) {\n      random = Math.random() * 16 | 0;\n      if (i === 8 || i === 12 || i === 16 || i === 20) {\n        uuid += '-';\n      }\n      uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);\n    }\n    return uuid;\n  }\n}\n\nclass CreateButton extends React.Component {\n  render() {\n    return (\n      <div className=\"cre\" style={{ display: 'inline-block' }}>\n        <button className=\"create\" onClick={this.props.createClick}>\n          Create\n        </button>\n      </div>\n    );\n  }\n}\n\nclass DeleteButton extends React.Component {\n  render() {\n    const isDelete = this.props.isDelete;\n    //闭包\n    const onDeleteBgColor3 = ()=> {\n      console.log(\"onDeleteBgColor3\");\n      this.props.onDeleteBgColor3();\n    }\n    //等价于下面的\n    // const onDeleteBgColor3 = this.props.onDeleteBgColor3;\n      return (\n        <div className=\"del\" style={{ display: 'inline-block' }}>\n          {isDelete ?\n          // 断点调试不进去的时候，加console.log()\n            <button className=\"delete\" name=\"Delete\" onClick={onDeleteBgColor3} >\n              Delete\n          </button> :\n            <button className=\"delete\" name=\"Delete\" disabled >\n              Delete\n          </button>}\n        </div>\n      );\n    }\n}\n\nclass FinishButton extends React.Component {\n  render() {\n    const isFinish = this.props.isFinish;\n    const onFinishDelLine = this.props.onFinishDelLine;\n    return (\n      <div className=\"fin\" style={{ display: 'inline-block' }}>\n        {isFinish ?\n          <button className=\"finish\" onClick={onFinishDelLine} >\n            Finish\n        </button> :\n          <button className=\"finish\" disabled >\n            Finish\n        </button>}\n      </div>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}